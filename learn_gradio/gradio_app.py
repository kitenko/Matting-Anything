import cv2
import numpy as np
import gradio as gr
from typing import List, Tuple, Optional

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à –∫–ª–∞—Å—Å —Å –º–µ—Ç–æ–¥–æ–º `predict`
import sys
sys.path.append("/app")
from learn_gradio.inference import MAMInferencer

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏
model = MAMInferencer("/app/checkpoints/return_cousine_pre_train_grad_true_new_shedule_real_world_aug_full_data_sam_2_multiple_mask_True/model_step_30000.pth") 

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
Point = Tuple[int, int]  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ (x, y)
BBox = Tuple[Point, Point]  # Bounding Box (–≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π –∏ –Ω–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª)

# –¶–≤–µ—Ç–∞ –∏ –º–∞—Ä–∫–µ—Ä—ã
COLORS = [(255, 0, 0), (0, 0, 255), (0, 255, 0)]  # –ö—Ä–∞—Å–Ω—ã–π (foreground), –°–∏–Ω–∏–π (background)
MARKERS = [1, 5, 3]
BBOX_COLOR = (0, 255, 0)  # Bounding Box - –∑–µ–ª—ë–Ω—ã–π

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def store_img(img: np.ndarray) -> Tuple[np.ndarray, np.ndarray, List[Tuple[Point, int]], List[BBox], Optional[Point]]:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–∫–∏ —Ç–æ—á–µ–∫ –∏ BBox."""
    return img, img.copy(), [], [], None  # –°–æ—Ö—Ä–∞–Ω—è–µ–º original_image, –æ—á–∏—â–∞–µ–º —Ç–æ—á–∫–∏ –∏ BBox

def draw_points(img: np.ndarray, points: List[Tuple[Point, int]]) -> np.ndarray:
    """–†–∏—Å—É–µ—Ç —Ç–æ—á–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."""
    img = img.copy()
    for point, label in points:
        cv2.drawMarker(img, point, COLORS[label], markerType=MARKERS[label], markerSize=20, thickness=5)
    return img

def draw_bbox(img: np.ndarray, bboxes: List[BBox]) -> np.ndarray:
    """–†–∏—Å—É–µ—Ç –≤—Å–µ Bounding Box –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."""
    img = img.copy()
    for (start, end) in bboxes:
        cv2.rectangle(img, start, end, BBOX_COLOR, thickness=2)
    return img


# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —Ç–æ—á–µ–∫ –∏ Bounding Box)
def handle_click(
    img: np.ndarray,
    original_image: np.ndarray,
    selected_points: List[Tuple[Point, int]],
    bounding_boxes: List[BBox],
    temp_point: Optional[Point],
    tool: str,
    point_type: str,
    evt: gr.SelectData
) -> Tuple[np.ndarray, List[Tuple[Point, int]], List[BBox], Optional[Point]]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫: –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ—á–∫—É –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç Bounding Box."""
    
    if tool == "–¢–æ—á–∫–∏":
        label = 0 if point_type == "foreground" else 1
        selected_points.append((evt.index, label))  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É
        return draw_points(img, selected_points), selected_points, bounding_boxes, temp_point

    if tool == "Bounding Box":
        if temp_point is None:
            selected_points.append((evt.index, 2))  # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è BBox
            return draw_points(img, selected_points), selected_points, bounding_boxes, evt.index
        
        if bounding_boxes:
            bounding_boxes.pop()
        # –ó–∞–≤–µ—Ä—à–∞–µ–º Bounding Box
        bounding_boxes.append((temp_point, evt.index))
        img = undo_point(original_image, selected_points, bounding_boxes)  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
        return img, selected_points, bounding_boxes, None

    return img, selected_points, bounding_boxes, temp_point  # –ù–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏

# üîπ –û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏
def undo_point(orig_img: np.ndarray, sel_pix: List[Tuple[Point, int]], bboxes: List[BBox]) -> np.ndarray:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª–∏–∫ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
    if sel_pix:
        sel_pix.pop()  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É
    img = draw_bbox(orig_img, bboxes)
    return draw_points(img, sel_pix)

# üîπ –û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ Bounding Box
def undo_bbox(orig_img: np.ndarray, bboxes: List[BBox], sel_pix: List[Tuple[Point, int]]) -> np.ndarray:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π Bounding Box –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
    if bboxes:
        bboxes.pop()  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π BBox
    img = draw_points(orig_img, sel_pix)
    return draw_bbox(img, bboxes)

# üîπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ
def clear_all(orig_img: np.ndarray) -> Tuple[np.ndarray, List[Tuple[Point, int]], List[BBox], Optional[Point]]:
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ç–æ—á–∫–∏ –∏ Bounding Box."""
    return orig_img, [], [], None

# üîπ –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
def run_prediction(
    original_image: np.ndarray,
    selected_points: List[Tuple[Point, int]],
    bounding_boxes: List[BBox],
    guidance_mode: str,
    background_type: str
) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω—Ñ–µ—Ä–µ–Ω—Å –º–æ–¥–µ–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    
    if original_image is None:
        return None, None, None
    
    formatted_points = [((x, y), label) for ((x, y), label) in selected_points]
    
    com_img, green_img, alpha_rgb = model.predict(
        image=original_image,
        points=formatted_points,
        bboxes=bounding_boxes,
        guidance_mode=guidance_mode,
        background_type=background_type
    )

    return com_img, green_img, alpha_rgb

# üîπ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
def update_ui(tool: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã."""
    return (
        gr.update(visible=(tool == "–¢–æ—á–∫–∏")),
        gr.update(visible=(tool == "–¢–æ—á–∫–∏")),
        gr.update(visible=(tool == "Bounding Box"))
    )

# üîπ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Gradio
def main() -> None:
    with gr.Blocks() as demo:
        gr.Markdown("### –í—ã–±–æ—Ä —Ç–æ—á–µ–∫, Bounding Box –∏ –∑–∞–ø—É—Å–∫ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞")

        input_image = gr.Image(type="numpy")
        original_image = gr.State(value=None)
        selected_points = gr.State([])
        bounding_boxes = gr.State([])
        temp_bbox_start = gr.State(value=None)
        
        with gr.Row():
            tool_selector = gr.Radio(["–¢–æ—á–∫–∏", "Bounding Box"], value="–¢–æ—á–∫–∏", label="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
        
        with gr.Row():
            radio = gr.Radio(["foreground", "background"], value="foreground", label="–¢–∏–ø —Ç–æ—á–∫–∏", visible=True)
        
        with gr.Row():
            undo_button = gr.Button("–û—Ç–º–µ–Ω–∏—Ç—å –∫–ª–∏–∫", visible=True)
            undo_bbox_button = gr.Button("–û—Ç–º–µ–Ω–∏—Ç—å Bounding Box", visible=False)
            clear_button = gr.Button("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë")
        
        with gr.Row():
            guidance_mode = gr.Radio(["alpha", "mask"], value="alpha", label="Guidance Mode")
            background_type = gr.Radio(["real_world_sample", "original"], value="real_world_sample", label="Background Type")

        predict_button = gr.Button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å")

        with gr.Row():
            com_img = gr.Image(type="numpy", label="Composited Image")
            green_img = gr.Image(type="numpy", label="Green Screen")
            alpha_rgb = gr.Image(type="numpy", label="Alpha Mask")

        input_image.upload(store_img, [input_image], [input_image, original_image, selected_points, bounding_boxes, temp_bbox_start])

        input_image.select(
            handle_click, 
            [input_image, original_image, selected_points, bounding_boxes, temp_bbox_start, tool_selector, radio],  
            [input_image, selected_points, bounding_boxes, temp_bbox_start]
        )

        undo_button.click(undo_point, [original_image, selected_points, bounding_boxes], [input_image])
        undo_bbox_button.click(undo_bbox, [original_image, bounding_boxes, selected_points], [input_image])
        clear_button.click(clear_all, [original_image], [input_image, selected_points, bounding_boxes, temp_bbox_start])

        predict_button.click(
            run_prediction,
            [original_image, selected_points, bounding_boxes, guidance_mode, background_type],
            [com_img, green_img, alpha_rgb]
        )

        tool_selector.change(update_ui, [tool_selector], [radio, undo_button, undo_bbox_button])

    demo.launch(debug=True)

if __name__ == "__main__":
    main()
